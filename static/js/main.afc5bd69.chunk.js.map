{"version":3,"sources":["components/SoundSelector.js","components/Sequencer.js","App.js","serviceWorker.js","index.js"],"names":["SoundSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedSoundIdx","prevProps","prevState","snapshot","rowIdx","row","handleSoundSelect","soundIdx","setState","_this2","sounds","dropDownSounds","map","sound","idx","react_default","a","createElement","DropdownItem","key","active","onClick","changeSelectedSound","UncontrolledDropdown","size","DropdownToggle","caret","DropdownMenu","Component","SequencerRow","_ref","activeStep","seqRow","addSound","steps","_ref$isHeader","isHeader","sequencerRow","step","push","style","border","className","id","cursor","opacity","scope","SoundSelector_SoundSelector","SequencerTrackRows","sequencerTrackRows","rows","sequencer","rowSeq","Sequencer","isDefaultState","isPlaying","bpm","Array","fill","rowSoundEngine","Howl","src","soundUrls","stopSequencer","bind","assertThisInitialized","clearSequencer","resetSequencer","handleBPMChange","soundEngines","soundUrl","seq","objectSpread","length","alert","concat","toConsumableArray","play","ms","activeStepID","setInterval","clearInterval","resetSeq","event","_event$target$id$spli","target","split","_event$target$id$spli2","slicedToArray","updatedRowSeq","slice","value","_this3","react","Row","Col","Table","background-color","boxShadow","Button","color","outline","playSequencer","addTrack","addStep","xs","Input","type","min","max","onChange","App","modal","toggleModal","Container","Sequencer_Sequencer","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afc5bd69.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nexport default class SoundSelector extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n                    selectedSoundIdx: 0\n                  };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot){\n    if(prevState.selectedSoundIdx !== this.state.selectedSoundIdx){\n      const rowIdx = this.props.row - 1;\n      this.props.handleSoundSelect(rowIdx, this.state.selectedSoundIdx);\n    }\n  }\n\n  changeSelectedSound(rowIdx, soundIdx) {\n    this.setState({selectedSoundIdx: soundIdx});\n    this.props.handleSoundSelect(rowIdx, soundIdx);\n  }\n\n  \n  render() {\n    const sounds = this.props.sounds;\n    const rowIdx = this.props.row - 1;\n\n    const dropDownSounds = sounds.map((sound, idx) => {\n      return(\n      <DropdownItem key={idx}\n                    active={this.state.selectedSoundIdx === idx}\n                    onClick={() => this.changeSelectedSound(rowIdx, idx)}>\n        {sound}\n      </DropdownItem>\n      );\n    });\n\n    return(\n      <UncontrolledDropdown size=\"sm\">\n        <DropdownToggle caret>\n          {sounds[this.state.selectedSoundIdx]}\n        </DropdownToggle>\n        <DropdownMenu>\n          {dropDownSounds}\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    );\n  }\n}","import React, { Component, Fragment } from 'react';\nimport { Table, Button, Row, Col, Input } from 'reactstrap';\nimport SoundSelector from './SoundSelector';\nimport { Howl } from 'howler';\n\nfunction SequencerRow({sounds, handleSoundSelect, activeStep, seqRow, addSound, row, steps, isHeader=false}) {\n  // function that builds and returns one sequencer row\n  \n  // initialize empty row array\n  const sequencerRow = [];\n\n  let step = 0\n\n  // if header...\n  if(isHeader) {\n    // first row of header blank with key 'header-none'\n    sequencerRow.push(<th style={{\"border\": \"1px solid #ffd7a8\"}} key='header-none'></th>);\n\n    // after first row of header, each th displays step num \n    while(step < steps) {\n      sequencerRow.push(<th style={{\"border\": \"1px solid #ffd7a8\"}} key={'header-' + step+1}\n                            className={step === activeStep ? 'table-warning font-weight-light' : 'font-weight-light'}>{step+1}</th>);\n      step++;\n    }\n\n    // return the entire header row\n    return (\n      <tr className=\"text-center\">\n      {sequencerRow}\n      </tr>\n    );\n\n    // if not the header row...\n  } else {\n    while(step < steps) {\n\n      // each td blank.  change color if the associated sequencer array \n      // row step is not null (only the associated 2D row of the sequencer\n      // array is passed in)\n      // addSound(): each cell adds (or removes) an 'x' to the sequencerArray when clicked.\n      // which, in turn, results in a change of the cell color\n      sequencerRow.push(<td key={row+'-'+step}\n                            onClick={addSound}\n                            id={row+'-'+step}\n                            style={{'cursor': 'pointer', 'opacity': '0.7', \"border\": \"1px solid #ffd7a8\"}}\n                            className={seqRow[step] !== null ? 'table-primary' : null}></td>);\n      step++;\n    }\n\n    // return row with Track n as the first cell (th), followed\n    // by the sequencer row\n    return(\n      <tr>\n        <th style={{\"border\": \"1px solid #ffd7a8\"}} scope=\"row\" className=\"text-center font-weight-light\">\n        Track {row}\n        <SoundSelector row={row} sounds={sounds} handleSoundSelect={handleSoundSelect}/>\n        </th>\n        {sequencerRow}\n      </tr>\n    );\n  }\n}\n\nfunction SequencerTrackRows(props) {\n  // function that returns multiple SequencerRows for multiple\n  // tracks\n\n  const sequencerTrackRows = [];\n  let row = 1\n  while(row <= props.rows) {\n    sequencerTrackRows\n    .push(<SequencerRow key={row}\n                        sounds={props.sounds}\n                        handleSoundSelect={props.handleSoundSelect}\n                        activeStep={props.activeStep}\n                        seqRow={props.sequencer[row-1].rowSeq}\n                        addSound={props.addSound}\n                        row={row}\n                        steps={props.steps}/>)\n    row++\n  }\n  return sequencerTrackRows;\n}\n\nexport default class Sequencer extends Component {\n\n  constructor(props) {\n    const rows = 2; // initial num of tracks\n    const steps = 6; // inital num of steps\n\n    super(props);\n    this.state = {\n      isDefaultState: true,\n      isPlaying: false,\n      bpm: 240,\n      activeStep: 0,\n      sequencer: new Array(rows).fill({ rowSeq: new Array(steps).fill(null),\n                                          rowSoundEngine: new Howl({src: [this.props.soundUrls[0]]})\n                                        })\n    };\n\n    this.stopSequencer = this.stopSequencer.bind(this);\n    this.clearSequencer = this.clearSequencer.bind(this);\n    this.resetSequencer = this.resetSequencer.bind(this);\n    this.addSound = this.addSound.bind(this);\n    this.handleSoundSelect = this.handleSoundSelect.bind(this);\n    this.handleBPMChange = this.handleBPMChange.bind(this);\n\n    this.rows = rows;\n    this.steps = steps;\n\n    this.soundEngines = this.props.soundUrls.map(soundUrl => {\n      return(\n        new Howl({src: [soundUrl]})\n      );\n    });\n  };\n\n  addTrack() {\n    const seq = this.state.sequencer.map(row => ({...row}));\n    seq.push(\n              {\n                rowSeq: new Array(seq[0].rowSeq.length).fill(null),\n                rowSoundEngine: null\n              }\n    );\n\n    if(seq.length >= 9) {\n      alert('Maximum Number of Tracks: 8')\n    } else {\n    this.setState({sequencer: seq});\n    }\n  }\n  \n  addStep() {\n    const seq = this.state.sequencer.map(row => ({...row}));\n\n    for(let row in seq) {\n      seq[row].rowSeq = [...seq[row].rowSeq, null];\n    }\n\n    if(seq[0].rowSeq.length >= 17) {\n      alert('Maximum Number of Steps: 16')\n    } else {\n    this.setState({sequencer: seq});\n    }\n  }\n\n  handleSoundSelect(rowIdx, soundIdx) {\n    const seq = this.state.sequencer.map(row => ({...row}));\n    seq[rowIdx].rowSoundEngine = this.soundEngines[soundIdx];\n    this.setState({sequencer: seq});\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot){\n    if(prevState.activeStep !== this.state.activeStep){\n      for(let row in this.state.sequencer){\n        if(this.state.sequencer[row].rowSeq[this.state.activeStep] !== null){\n          if(this.state.sequencer[row].rowSoundEngine !== null){\n            this.state.sequencer[row].rowSoundEngine.play();\n          }\n        }\n      }\n    }\n  }\n\n  playSequencer(bpm) {\n    this.setState({isDefaultState: false});\n    this.setState({isPlaying: true});\n    const steps = this.state.sequencer[0].rowSeq.length;\n    const ms = 60000 / bpm;\n    this.activeStepID = setInterval(\n      () => this.setState(state =>\n            ({activeStep: (state.activeStep + 1)\n            % steps})),\n      ms\n    );\n  }\n\nstopSequencer() {\n  this.setState({isPlaying: false});\n  clearInterval(this.activeStepID);\n}\n\nclearSequencer() {\n  this.setState({isDefaultState: true});\n  this.setState({isPlaying: false});\n  clearInterval(this.activeStepID);\n  this.setState({activeStep: 0});\n\n  const seq = this.state.sequencer.map(row => ({...row}));\n\n  for(let row in seq){\n    seq[row].rowSeq = seq[row].rowSeq.fill(null);\n  }\n\n  this.setState({sequencer: seq});\n}\n\nresetSequencer() {\n  this.setState({isDefaultState: true});\n  this.setState({isPlaying: false});\n  clearInterval(this.activeStepID);\n  this.setState({activeStep: 0});\n  const resetSeq = new Array(this.rows).fill({ \n                                          rowSeq: new Array(this.steps).fill(null),\n                                          rowSoundEngine: new Howl({\n                                                                    src: [this.props.soundUrls[0]]\n                                                                  })\n  })\n  this.setState({sequencer: resetSeq});\n}\n\naddSound(event) {\nconst [row, step] = event.target.id.split('-');\nconst updatedRowSeq = this.state.sequencer[row-1].rowSeq.slice();\nupdatedRowSeq[step] = (updatedRowSeq[step] === null) ? 'x' : null;\n\nconst seq = this.state.sequencer.map(row => ({...row}));\nseq[row-1].rowSeq = updatedRowSeq;\n\nthis.setState({sequencer: seq});\n}\n\ncomponentWillUnmount() {\n  clearInterval(this.activeStepID);\n}\n\nhandleBPMChange(event) {\n  this.setState({bpm: event.target.value});\n}\n\n  render() {\n    const steps = this.state.sequencer[0].rowSeq.length;\n    const rows = this.state.sequencer.length;\n\n    return(\n      <Fragment>\n        <Row>\n          <Col>\n            <Table  \n                   className=\"text-muted mt-3\"\n                   style={{\"background-color\": \"#d5ede4\", \n                           \"boxShadow\": \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\"}}\n            >\n              <thead>\n                <SequencerRow activeStep={this.state.activeStep}\n                              steps={steps}\n                              isHeader={true}/>\n              </thead>\n              <tbody>\n                <SequencerTrackRows activeStep={this.state.activeStep}\n                                    sounds={this.props.sounds}\n                                    handleSoundSelect={this.handleSoundSelect}\n                                    sequencer={this.state.sequencer}\n                                    addSound={this.addSound}\n                                    rows={rows}\n                                    steps={steps} />\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row className=\"text-center mb-3 font-weight-light\">\n          <Col>\n            <Button color=\"info\" outline className=\"mr-3\" onClick={this.resetSequencer}>Reset</Button>\n            <Button color=\"info\" outline className=\"ml-3 mr-3\" onClick={this.clearSequencer}>Clear</Button>\n            <Button color=\"danger\" outline className=\"ml-3 mr-3\" onClick={this.stopSequencer}>Stop</Button>\n            <Button color=\"success\" outline className=\"ml-3\" onClick={() => this.playSequencer(this.state.bpm)}>Play</Button>\n          </Col>\n        </Row>\n        <Row className=\"text-center text-muted\">\n          <Col className=\"font-weight-light\">\n            <Button outline className={!this.state.isDefaultState ? 'd-none m-3' : 'm-3'} onClick={() => this.addTrack()}><i className=\"fa fa-plus-circle\"></i> Tracks</Button>\n            <Button outline className={!this.state.isDefaultState ? 'd-none m-3' : 'm-3'} onClick={() => this.addStep()}><i className=\"fa fa-plus-circle\"></i> Steps</Button>\n          </Col>\n        </Row>\n        <Row className={this.state.isPlaying ? 'd-none' : 'text-muted text-center'}>\n          <Col xs=\"2\">\n            <h5>BPM</h5>\n          </Col>\n          <Col xs=\"8\">\n            <Input type='range' min={60} max={700} value={this.state.bpm} onChange={this.handleBPMChange}/>\n          </Col>\n          <Col xs=\"2\">\n            <h5 className=\"font-weight-light\">{this.state.bpm}</h5>\n          </Col>\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\n","import React, { Component, Fragment } from 'react';\nimport { Container, Row, Col, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport Sequencer from './components/Sequencer.js';\nimport './App.css';\n\nconst sounds = ['Kick', 'Snare', 'Castanets', 'Cymbals', 'Tambourine', 'Woodblock'];\nconst soundUrls = ['https://osquibb.github.io/public/sounds/kick.mp3',\n                  'https://osquibb.github.io/public/sounds/snare.mp3',\n                  'https://osquibb.github.io/public/sounds/castanets.mp3',\n                  'https://osquibb.github.io/public/sounds/cymbals.mp3',\n                  'https://osquibb.github.io/public/sounds/tambourine.mp3',\n                  'https://osquibb.github.io/public/sounds/woodblock.mp3'];\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: true\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  toggleModal() {\n    this.setState({modal: false});\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Container>\n          <Row className=\"text-center mt-4\">\n            <Col>\n              <h2>Step Sequencer</h2>\n            </Col>\n          </Row>\n          <Sequencer sounds={sounds}\n                     soundUrls={soundUrls} \n          />\n        </Container>\n        <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n        <ModalHeader toggle={this.toggle}>How to Play</ModalHeader>\n        <ModalBody>\n          <ol>\n            <li>Click on cells in the sequencer</li>\n            <li>Then press play!</li>\n          </ol>\n          <p>(Hint: Try adding tracks and changing the sounds!)</p>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"info\" outline onClick={this.toggleModal}>Got it!</Button>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}