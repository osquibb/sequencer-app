{"version":3,"sources":["components/SoundSelector.js","components/Sequencer.js","App.js","serviceWorker.js","index.js"],"names":["SoundSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedSoundIdx","prevProps","prevState","snapshot","rowIdx","row","handleSoundSelect","soundIdx","setState","_this2","sounds","dropDownSounds","map","sound","idx","react_default","a","createElement","DropdownItem","key","active","onClick","changeSelectedSound","UncontrolledDropdown","size","DropdownToggle","caret","DropdownMenu","Component","SequencerRow","_ref","activeStep","seqRow","addSound","steps","_ref$isHeader","isHeader","sequencerRow","step","push","className","id","style","cursor","opacity","scope","SoundSelector_SoundSelector","SequencerTrackRows","sequencerTrackRows","rows","sequencer","rowSeq","Sequencer","isDefaultState","isPlaying","bpm","Array","fill","rowSoundEngine","Howl","src","soundUrls","stopSequencer","bind","assertThisInitialized","clearSequencer","resetSequencer","handleBPMChange","soundEngines","soundUrl","seq","objectSpread","length","alert","concat","toConsumableArray","play","ms","activeStepID","setInterval","clearInterval","resetSeq","event","_event$target$id$spli","target","split","_event$target$id$spli2","slicedToArray","updatedRowSeq","slice","value","_this3","react","Row","Col","Table","bordered","Button","color","outline","playSequencer","addTrack","addStep","xs","Input","type","min","max","onChange","App","Container","Sequencer_Sequencer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87a062b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nexport default class SoundSelector extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n                    selectedSoundIdx: 0\n                  };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot){\n    if(prevState.selectedSoundIdx !== this.state.selectedSoundIdx){\n      const rowIdx = this.props.row - 1;\n      this.props.handleSoundSelect(rowIdx, this.state.selectedSoundIdx);\n    }\n  }\n\n  changeSelectedSound(rowIdx, soundIdx) {\n    this.setState({selectedSoundIdx: soundIdx});\n    this.props.handleSoundSelect(rowIdx, soundIdx);\n  }\n\n  \n  render() {\n    const sounds = this.props.sounds;\n    const rowIdx = this.props.row - 1;\n\n    const dropDownSounds = sounds.map((sound, idx) => {\n      return(\n      <DropdownItem key={idx}\n                    active={this.state.selectedSoundIdx === idx}\n                    onClick={() => this.changeSelectedSound(rowIdx, idx)}>\n        {sound}\n      </DropdownItem>\n      );\n    });\n\n    return(\n      <UncontrolledDropdown size=\"sm\">\n        <DropdownToggle caret>\n          {sounds[this.state.selectedSoundIdx]}\n        </DropdownToggle>\n        <DropdownMenu>\n          {dropDownSounds}\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    );\n  }\n}","import React, { Component, Fragment } from 'react';\nimport { Table, Button, Row, Col, Input } from 'reactstrap';\nimport SoundSelector from './SoundSelector';\nimport { Howl } from 'howler';\n\nfunction SequencerRow({sounds, handleSoundSelect, activeStep, seqRow, addSound, row, steps, isHeader=false}) {\n  // function that builds and returns one sequencer row\n  \n  // initialize empty row array\n  const sequencerRow = [];\n\n  let step = 0\n\n  // if header...\n  if(isHeader) {\n    // first row of header blank with key 'header-none'\n    sequencerRow.push(<th key='header-none'></th>);\n\n    // after first row of header, each th displays step num \n    // blue w/ white text if step num is the active step\n    while(step < steps) {\n      sequencerRow.push(<th key={'header-' + step+1}\n                            className={step === activeStep ? 'table-secondary font-weight-light' : 'font-weight-light'}>{step+1}</th>);\n      step++;\n    }\n\n    // return the entire header row\n    return (\n      <tr className=\"text-center\">\n      {sequencerRow}\n      </tr>\n    );\n\n    // if not the header row...\n  } else {\n    while(step < steps) {\n\n      // each td blank.  change color if the associated sequencer array \n      // row step is not null (only the associated 2D row of the sequencer\n      // array is passed in)\n      // addSound(): each cell adds (or removes) an 'x' to the sequencerArray when clicked.\n      // which, in turn, results in a change of the cell color\n      sequencerRow.push(<td key={row+'-'+step}\n                            onClick={addSound}\n                            id={row+'-'+step}\n                            style={{'cursor': 'pointer', 'opacity': '0.7'}}\n                            className={seqRow[step] !== null ? 'table-info' : null}></td>);\n      step++;\n    }\n\n    // return row with Track n as the first cell (th), followed\n    // by the sequencer row\n    return(\n      <tr>\n        <th scope=\"row\" className=\"text-center font-weight-light\">\n        Track {row}\n        <SoundSelector row={row} sounds={sounds} handleSoundSelect={handleSoundSelect}/>\n        </th>\n        {sequencerRow}\n      </tr>\n    );\n  }\n}\n\nfunction SequencerTrackRows(props) {\n  // function that returns multiple SequencerRows for multiple\n  // tracks\n\n  const sequencerTrackRows = [];\n  let row = 1\n  while(row <= props.rows) {\n    sequencerTrackRows\n    .push(<SequencerRow key={row}\n                        sounds={props.sounds}\n                        handleSoundSelect={props.handleSoundSelect}\n                        activeStep={props.activeStep}\n                        seqRow={props.sequencer[row-1].rowSeq}\n                        addSound={props.addSound}\n                        row={row}\n                        steps={props.steps}/>)\n    row++\n  }\n  return sequencerTrackRows;\n}\n\nexport default class Sequencer extends Component {\n\n  constructor(props) {\n    const rows = 2; // initial num of tracks\n    const steps = 8; // inital num of steps\n\n    super(props);\n    this.state = {\n      isDefaultState: true,\n      isPlaying: false,\n      bpm: 240,\n      activeStep: 0,\n      sequencer: new Array(rows).fill({ rowSeq: new Array(steps).fill(null),\n                                          rowSoundEngine: new Howl({src: [this.props.soundUrls[0]]})\n                                        })\n    };\n\n    this.stopSequencer = this.stopSequencer.bind(this);\n    this.clearSequencer = this.clearSequencer.bind(this);\n    this.resetSequencer = this.resetSequencer.bind(this);\n    this.addSound = this.addSound.bind(this);\n    this.handleSoundSelect = this.handleSoundSelect.bind(this);\n    this.handleBPMChange = this.handleBPMChange.bind(this);\n\n    this.rows = rows;\n    this.steps = steps;\n\n    this.soundEngines = this.props.soundUrls.map(soundUrl => {\n      return(\n        new Howl({src: [soundUrl]})\n      );\n    });\n  };\n\n  addTrack() {\n    const seq = this.state.sequencer.map(row => ({...row}));\n    seq.push(\n              {\n                rowSeq: new Array(seq[0].rowSeq.length).fill(null),\n                rowSoundEngine: null\n              }\n    );\n\n    if(seq.length >= 9) {\n      alert('Maximum Number of Tracks: 8')\n    } else {\n    this.setState({sequencer: seq});\n    }\n  }\n  \n  addStep() {\n    const seq = this.state.sequencer.map(row => ({...row}));\n\n    for(let row in seq) {\n      seq[row].rowSeq = [...seq[row].rowSeq, null];\n    }\n\n    if(seq[0].rowSeq.length >= 17) {\n      alert('Maximum Number of Steps: 16')\n    } else {\n    this.setState({sequencer: seq});\n    }\n  }\n\n  handleSoundSelect(rowIdx, soundIdx) {\n    const seq = this.state.sequencer.map(row => ({...row}));\n    seq[rowIdx].rowSoundEngine = this.soundEngines[soundIdx];\n    this.setState({sequencer: seq});\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot){\n    if(prevState.activeStep !== this.state.activeStep){\n      for(let row in this.state.sequencer){\n        if(this.state.sequencer[row].rowSeq[this.state.activeStep] !== null){\n          if(this.state.sequencer[row].rowSoundEngine !== null){\n            this.state.sequencer[row].rowSoundEngine.play();\n          }\n        }\n      }\n    }\n  }\n\n  playSequencer(bpm) {\n    this.setState({isDefaultState: false});\n    this.setState({isPlaying: true});\n    const steps = this.state.sequencer[0].rowSeq.length;\n    const ms = 60000 / bpm;\n    this.activeStepID = setInterval(\n      () => this.setState(state =>\n            ({activeStep: (state.activeStep + 1)\n            % steps})),\n      ms\n    );\n  }\n\nstopSequencer() {\n  this.setState({isPlaying: false});\n  clearInterval(this.activeStepID);\n}\n\nclearSequencer() {\n  this.setState({isDefaultState: true});\n  this.setState({isPlaying: false});\n  clearInterval(this.activeStepID);\n  this.setState({activeStep: 0});\n\n  const seq = this.state.sequencer.map(row => ({...row}));\n\n  for(let row in seq){\n    seq[row].rowSeq = seq[row].rowSeq.fill(null);\n  }\n\n  this.setState({sequencer: seq});\n}\n\nresetSequencer() {\n  this.setState({isDefaultState: true});\n  this.setState({isPlaying: false});\n  clearInterval(this.activeStepID);\n  this.setState({activeStep: 0});\n  const resetSeq = new Array(this.rows).fill({ \n                                          rowSeq: new Array(this.steps).fill(null),\n                                          rowSoundEngine: new Howl({\n                                                                    src: [this.props.soundUrls[0]]\n                                                                  })\n  })\n  this.setState({sequencer: resetSeq});\n}\n\naddSound(event) {\nconst [row, step] = event.target.id.split('-');\nconst updatedRowSeq = this.state.sequencer[row-1].rowSeq.slice();\nupdatedRowSeq[step] = (updatedRowSeq[step] === null) ? 'x' : null;\n\nconst seq = this.state.sequencer.map(row => ({...row}));\nseq[row-1].rowSeq = updatedRowSeq;\n\nthis.setState({sequencer: seq});\n}\n\ncomponentWillUnmount() {\n  clearInterval(this.activeStepID);\n}\n\nhandleBPMChange(event) {\n  this.setState({bpm: event.target.value});\n}\n\n  render() {\n    const steps = this.state.sequencer[0].rowSeq.length;\n    const rows = this.state.sequencer.length;\n\n    return(\n      <Fragment>\n        <Row>\n          <Col>\n            <Table bordered className=\"text-muted mt-5\">\n              <thead>\n                <SequencerRow activeStep={this.state.activeStep}\n                              steps={steps}\n                              isHeader={true}/>\n              </thead>\n              <tbody>\n                <SequencerTrackRows activeStep={this.state.activeStep}\n                                    sounds={this.props.sounds}\n                                    handleSoundSelect={this.handleSoundSelect}\n                                    sequencer={this.state.sequencer}\n                                    addSound={this.addSound}\n                                    rows={rows}\n                                    steps={steps} />\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row className=\"text-center mb-3 font-weight-light\">\n          <Col>\n            <Button color=\"info\" outline className=\"mr-3\" onClick={this.resetSequencer}>Reset</Button>\n            <Button color=\"info\" outline className=\"ml-3 mr-3\" onClick={this.clearSequencer}>Clear</Button>\n            <Button color=\"danger\" outline className=\"ml-3 mr-3\" onClick={this.stopSequencer}>Stop</Button>\n            <Button color=\"success\" outline className=\"ml-3\" onClick={() => this.playSequencer(this.state.bpm)}>Play</Button>\n          </Col>\n        </Row>\n        <Row className=\"text-center text-muted\">\n          <Col className=\"font-weight-light\">\n            <Button outline className={!this.state.isDefaultState ? 'd-none m-3' : 'm-3'} onClick={() => this.addTrack()}><i className=\"fa fa-plus-circle\"></i> Tracks</Button>\n            <Button outline className={!this.state.isDefaultState ? 'd-none m-3' : 'm-3'} onClick={() => this.addStep()}><i className=\"fa fa-plus-circle\"></i> Steps</Button>\n          </Col>\n        </Row>\n        <Row className={this.state.isPlaying ? 'd-none' : 'text-muted text-center'}>\n          <Col xs=\"2\">\n            <h5 className=\"font-weight-light\">BPM</h5>\n          </Col>\n          <Col xs=\"8\">\n            <Input type='range' min={60} max={700} value={this.state.bpm} onChange={this.handleBPMChange}/>\n          </Col>\n          <Col xs=\"2\">\n            <h5 className=\"font-weight-light\">{this.state.bpm}</h5>\n          </Col>\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport Sequencer from './components/Sequencer.js';\nimport './App.css';\n\nconst sounds = ['Kick', 'Snare', 'Castanets', 'Cymbals', 'Tambourine', 'Woodblock'];\nconst soundUrls = ['https://osquibb.github.io/public/sounds/kick.mp3',\n                  'https://osquibb.github.io/public/sounds/snare.mp3',\n                  'https://osquibb.github.io/public/sounds/castanets.mp3',\n                  'https://osquibb.github.io/public/sounds/cymbals.mp3',\n                  'https://osquibb.github.io/public/sounds/tambourine.mp3',\n                  'https://osquibb.github.io/public/sounds/woodblock.mp3'];\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Container>\n        <Sequencer sounds={sounds} soundUrls={soundUrls} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}